export class CoffeeMachine {
  constructor(machineInterface, hasCappuccinoMaker, hasCoffeeMill /*...*/) {
    this._hasCappuccinoMaker = hasCappuccinoMaker;
    this._hasCoffeeMill = hasCoffeeMill;
    this._machineInterface = machineInterface;
    this._isClean = true;
    this._isBroken = false;
    this._grainType = ['ground', 'whole grains'];
    this._typesOfCoffee = ['cappuccino', ' raf', ' dark coffee'];
    this._isAvailableGrain = 100;
    this._isAvailableWater = 100;
    this._init();
  }

  _init() {
    console.log(`
    –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!
    –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å –Ω–∞—à–∏–º –º–µ–Ω—é:
    ${this._typesOfCoffee}
    –î–ª—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—Ç–∫–∞ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.
    –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞!
    `);
    this._machineInterface._setupEventClick()
  }

  clean() {
    this._isClean = true;
    return true;
  }

  _checkContentsForMakingCoffee() {
    if (this._isAvailableGrain <= 0) {
      console.log('–¥–æ–±–∞–≤—å—Ç–µ –∫–æ—Ñ–µ');
      return false;
    }

    if (this._isAvailableWater <= 0) {
      console.log('–¥–æ–ª–µ–π—Ç–µ –≤–æ–¥—ã');
      return false;
    }

    return true;
  }

  _prepare() {
    console.log('–ø—Ä–æ–≤–µ—Ä—è—é...');

    return new Promise((resolve, reject) => {
      setTimeout(() => {
        if (!this._isClean && !this._isBroken) {
          console.log('–æ—á–∏—â–∞—é...');
          this.clean();
        }

        if (!this._checkContentsForMakingCoffee()) {
          reject();
          return false;
        }

        resolve(console.log('—è –≥–æ—Ç–æ–≤–∞ –¥–µ–ª–∞—Ç—å –∫–æ—Ñ–µ!'));

      }, 3000);
    });
  }

  makeCoffee(typeOfCoffee, grainType) {
    this._prepare().then(() => {

      if (this._grainType === 'whole grains' && !this._hasCoffeeMill) {
        this._grindGrain();
      }

      this._isClean = false;

      setTimeout(() => console.log('–∑–∞–≤–∞—Ä–∏–≤–∞—é ‚òïÔ∏è...'), 2000);

    });
  }

  _whipMilk() {
    setTimeout(() => {
      if (this._hasCappuccinoMaker) {
        console.log('–≤–∑–±–∏–≤–∞—é ü•õ...');
      }
    }, 1000);
  }

  _grindGrain() {
    this._isAvailableGrain -= 20;
    console.log('–∏–∑–º–µ–ª—å—á–∞—é! üòä');

    return true;
  }
}
